{namespace Templates.ApiBuilder}

/**
 * This renders the main element.
 * @param? elementClasses
 * @param id
 * @skipUpdates elementClasses
 */
{template .content}
	<div id="{$id}" class="builder component{$elementClasses ? ' ' + $elementClasses : ''}">
		{call .title data="all" /}
		{call .description data="all" /}
		{call .methods data="all" /}
		{call .path data="all" /}
		{call .params data="all" /}
		{call .body data="all" /}
		{call .handler data="all" /}
		{call .auth data="all" /}
	</div>
{/template}

/**
 * @param id
 * @param title
 * @param? visibility
 */
{template .title}
	<div id="{$id}-title" class="builder-title">
		<input
			type="text"
			class="form-control-borderless"
			name="title"
			placeholder="add a title..."
			value="{$title ? $title : ''}"
			autocomplete="off"
			autofocus
			data-oninput="handleInputTitle_"
		/>
		<div class="builder-visibility show-tooltip" alt="When your API is marked as 'visible' it means that it can be requested by anyone, whereas 'invisible' acts like a firewall where only your server can request it">
			<span class="builder-visibility-label">Visibility</span>
			<div class="builder-visibility-switcher">
				{call Templates.Switcher.content}
					{param checked: isNonnull($visibility) ? $visibility : true /}
					{param events: ['checkedChanged': $id + ':handleVisibilitySwitcherCheckedChanged_'] /}
					{param id: $id + '-visibilitySwitcher' /}
				{/call}
			</div>
		</div>
	</div>
{/template}

/**
 * @param id
 * @param description
 */
{template .description}
	<div id="{$id}-description" class="builder-description">
		<textarea
			class="form-control-borderless"
			name="description"
			placeholder="add a description..."
			autocomplete="off"
			data-oninput="handleInputDescription_">
			{$description ? $description : ''}
		</textarea>
	</div>
{/template}

/**
 * @param id
 * @param method
 */
{template .methods}
	<div id="{$id}-methods" class="api-builder-methods">
		<p class="api-section-title">
			Method <a class="api-section-title-link show-tooltip" alt="Learn more" href="/learn/custom-apis.html#method-configuration"><span class="icon-12-external"></span></a>
		</p>
		{call Templates.ButtonGroup.content}
			{param buttons: [
				['label': 'get',    'cssClass': 'btn btn-default http-get-bg'],
				['label': 'post',   'cssClass': 'btn btn-default http-post-bg'],
				['label': 'put',    'cssClass': 'btn btn-default http-put-bg'],
				['label': 'patch',  'cssClass': 'btn btn-default http-patch-bg'],
				['label': 'delete', 'cssClass': 'btn btn-default http-delete-bg']
			] /}
			{param events: ['selectedChanged': $id + ':handleMethodsSelectedChanged_'] /}
			{param id: $id + '-methodButtonGroup' /}
			{param minSelected: 1 /}
			{param selected: $method ? $method : ['get'] /}
		{/call}
	</div>
{/template}

/**
 * @param host
 * @param id
 * @param path
 */
{template .path}
	<div id="{$id}-path">
		<p class="api-section-title">
			Endpoint <a class="api-section-title-link show-tooltip" alt="Learn more" href="/learn/custom-apis.html#path-configuration"><span class="icon-12-external"></span></a>
		</p>
		<div class="form-group">
			<div class="input-group">
				<div class="input-group-addon">{$host ? $host : ''}</div>
				<div class="input-inner-addon input-inner-addon-left">
					<span class="input-inner-icon-helper icon-16-info show-tooltip" alt="To enable data in your path just use the magic token '@'. You can also match only the prefix of the request by using the wildcard token '*'"></span>
					<input
						type="text"
						class="input-group-addon-input form-control"
						name="path"
						placeholder="/new-api"
						value="{$path ? $path : ''}"
						data-oninput="handleInputPath_"
					/>
				</div>
			</div>
		</div>
	</div>
{/template}

/**
 * @param? handler
 * @param id
 * @skipUpdates handler
 */
{template .handler}
	<div id="{$id}-handler" class="form-group">
		<p class="api-section-title">
			Handler <a class="api-section-title-link show-tooltip" alt="Learn more" href="/learn/custom-apis.html#handler-configuration"><span class="icon-12-external"></span></a>
		</p>
		<div class="builder-section-handler">
			<textarea
				class="form-control handler"
				name="handler"
				placeholder='function handler() {lb}{\n}&nbsp;&nbsp;return "Hello World";{\n}{rb}'>
				{$handler ? $handler : ''}
			</textarea>
		</div>
	</div>
{/template}

/**
 * @param id
 * @param body
 */
{template .body}
	<div id="{$id}-body">
		<p class="api-section-title">
			Body <a class="api-section-title-link show-tooltip" alt="Learn more" href="/learn/custom-apis.html#body-configuration"><span class="icon-12-external"></span></a>
		</p>
		<div class="builder-section-body">
			{call .param}
				{param id: $id /}
				{param index: -1 /}
				{param param: $body ? $body : [] /}
			{/call}
		</div>
	</div>
{/template}

/**
 * @param id
 * @param parameters
 */
{template .params}
	<div id="{$id}-params" class="builder-params">
		<p class="api-section-title">
			Parameters <a class="api-section-title-link show-tooltip" alt="Learn more" href="/learn/custom-apis.html#parameters-configuration"><span class="icon-12-external"></span></a>
		</p>
		<div class="builder-section-params">
			{if $parameters}
				{foreach $param in $parameters}
					{call .param}
						{param id: $id /}
						{param index: index($param) /}
						{param param: $param /}
					{/call}
				{/foreach}
			{/if}
			<div class="builder-param-more row">
				<div class="col-md-12">
					<button class="btn btn-default btn-sm" data-onclick="handleClickAddParam_">
						<span class="icon-16-plus"></span> Add Parameter
					</button>
				</div>
			</div>
		</div>
	</div>
{/template}

/**
 * @param id
 * @param index
 * @param param
 */
{template .param private="true"}
	{let $isBody: $index == -1 /}
	{let $suffix: $isBody ? 'Body' : $index /}
	<div
		class="builder-param-item"
		data-index="{$index}"
		data-oninput="handleInputParam_">
		<div class="row builder-param-item-row">
			{if not $isBody}
				<div class="col-md-4">
					<label class="api-section-label" for="builder-param-name-{$suffix}">Name</label>
					<input id="builder-param-name-{$suffix}" type="text" class="form-control" placeholder="Parameter" value="{$param.name}" data-name="name" />
				</div>
			{/if}
			<div class="col-md-4">
				<label class="api-section-label" for="builder-param-type-{$suffix}">Type</label>
				{let $typesMap0: quoteKeysIfJs(['any': 0, 'array': 1, 'boolean': 2, 'number': 3, 'object': 4,  'string': 5]) /}
				{call Templates.Select.content}
					{param id: 'builder-param-type-' + $suffix /}
					{param buttonClass: 'btn btn-default form-control dropdown-select' /}
					{param events: ['selectedIndexChanged': $id + ':handleTypeSelectedIndexChanged_'] /}
					{param items: ['Any', 'Array', 'Boolean', 'Number', 'Object', 'String'] /}
					{param label: 'Type' /}
					{param selectedIndex: $param.type ? $typesMap0[$param.type] : 0 /}
				{/call}
			</div>
			<div class="col-md-3">
				<span class="builder-param-label">Required</span>
				{call Templates.Switcher.content}
					{param checked: $param.required ? $param.required : false /}
					{param events: ['checkedChanged': $id + ':handleRequiredCheckedChanged_'] /}
					{param elementClasses: 'builder-param-switcher' /}
					{param id: $id + '-requiredSwitcher' + $suffix /}
				{/call}
			</div>
			{if not $isBody}
				<div class="col-md-1 builder-param-actions">
					{call Templates.Dropdown.content}
						{param body kind="html"}
							<li data-onclick="{$id}:handleDuplicateParamClick_" data-index="{$index}"><a href="#">Duplicate</a></li>
							<li data-onclick="{$id}:handleRemoveParamClick_" data-index="{$index}"><a href="#">Remove</a></li>
						{/param}
						{param header kind="html"}
							<button class="builder-param-ellipsis btn-transparent icon-16-ellipsis" type="button" data-onclick="toggle"></button>
						{/param}
						{param id: $id + '-menu' + $suffix /}
					{/call}
				</div>
			{/if}
		</div>
		{if not $isBody}
			<div class="row builder-param-item-row">
				<div class="col-md-8">
					<label class="api-section-label" for="builder-param-description-{$suffix}">Description</label>
					<input
						id="builder-param-description-{$suffix}"
						type="text"
						class="form-control"
						placeholder="Type what this parameter does"
						value="{$param.description ? $param.description : ''}"
						data-name="description"
					/>
				</div>
			</div>
		{/if}
		<div class="builder-param-item-advanced" data-index="{$index}">
			<button class="builder-param-item-advanced-btn btn-transparent" type="button" data-onclick="handleAdvancedSetupClick_">
				Advanced Setup <span class="builder-param-item-advanced-arrow icon-12-arrow-down-short"></span>
			</button>
			{if $isBody}
				<div class="row builder-param-item-row">
					<div class="col-md-8">
						<label class="api-section-label" for="builder-param-description-{$suffix}">Description</label>
						<input
							id="builder-param-description-{$suffix}"
							type="text"
							class="form-control"
							placeholder="Type what should be passed to the body"
							value="{$param.description ? $param.description : ''}"
							data-name="description"
						/>
					</div>
				</div>
			{else}
				<div class="row builder-param-item-row">
					<div class="col-md-8">
						<label class="api-section-label" for="builder-param-value-{$suffix}">Value</label>
						<div class="input-inner-addon input-inner-addon-left">
							<span class="input-inner-icon-helper icon-16-info show-tooltip" alt="Define a value that will be injected in the received request"></span>
							<input
								id="builder-param-value-{$suffix}"
								type="text"
								class="form-control"
								placeholder="What is the default value?"
								value="{$param.value ? $param.value : ''}"
								data-name="value"
							/>
						</div>
					</div>
				</div>
			{/if}
			<div class="row builder-param-item-row">
				<div class="col-md-8">
					<label class="api-section-label" for="builder-param-validator-{$suffix}">Validator</label>
					<div class="input-inner-addon input-inner-addon-left">
						<span class="input-inner-icon-helper icon-16-info show-tooltip" alt="Describe any JavaScript expression to authorize the request. There couple variables that you could use here such as $auth, $params, $values"></span>
						<textarea
							id="builder-param-validator-{$suffix}"
							class="builder-param-item-validator-textarea"
							placeholder="">
							{$param.validator ? $param.validator : ''}
						</textarea>
					</div>
				</div>
			</div>
		</div>
	</div>
{/template}

/**
 * @param auth
 * @param id
 * @param permissions
 * @param roles
 */
{template .auth}
	<div id="{$id}-auth" class="form-group">
		<p class="api-section-title">
			Authentication <a class="api-section-title-link show-tooltip" alt="Learn more" href="/learn/custom-apis.html#auth-configuration"><span class="icon-12-external"></span></a>
		</p>
		<div class="builder-section-auth">
			<div class="builder-section-auth-row">
				{if $roles and $roles.length}
					<div class="builder-section-auth-roles">
						<p class="api-section-title">Roles</p>
						{foreach $role in $roles}
							<div class="builder-param-switcher-container">
								{let $roleChecked kind="text"}
									{call .arrHasItem}
										{param array: $auth.roles /}
										{param item: $role /}
									{/call}
								{/let}
								{call Templates.Switcher.content}
									{param checked: strContains($roleChecked, 'true') /}
									{param events: ['checkedChanged': $id + ':handleRoleCheckedChanged_'] /}
									{param elementClasses: 'builder-param-switcher' /}
									{param id: $id + '-rolesSwitcher' + $role /}
								{/call}
								<span class="builder-param-label"> {$role}</span>
							</div>
						{/foreach}
					</div>
				{/if}
				{if $permissions and $permissions.length}
					<div class="builder-section-auth-permissions">
						<p class="api-section-title">Permissions</p>
						{foreach $permission in $permissions}
							<div class="builder-param-switcher-container">
								{let $permissionChecked kind="text"}
									{call .arrHasItem}
										{param array: $auth.permissions /}
										{param item: $permission /}
									{/call}
								{/let}
								{call Templates.Switcher.content}
									{param checked: strContains($permissionChecked, 'true') /}
									{param events: ['checkedChanged': $id + ':handlePermissionCheckedChanged_'] /}
									{param elementClasses: 'builder-param-switcher' /}
									{param id: $id + '-permissionsSwitcher' + $permission /}
								{/call}
								<span class="builder-param-label"> {$permission}</span>
							</div>
						{/foreach}
					</div>
				{/if}
			</div>
			<label class="api-section-label" for="builder-param-auth-validator">Validator</label>
			<div class="input-inner-addon input-inner-addon-left">
				<span class="input-inner-icon-helper icon-16-info show-tooltip" alt="Describe any JavaScript expression to authorize the request. There couple variables that you could use here such as $auth, $params, $values"></span>
				<textarea id="builder-param-auth-validator" placeholder="$auth !== null">{$auth.validator ? $auth.validator : ''}</textarea>
			</div>
		</div>
	</div>
{/template}

/**
 * Checks if the given array has the given item. Returns 'true' if
 * it does, or nothing if it doesn't.
 * @param array
 * @param item
 */
{template .arrHasItem private="true"}
	{if $array}
		{foreach $arrItem in $array}
			{if $item == $arrItem}
				'true'
			{/if}
		{/foreach}
	{/if}
{/template}
